<?php namespace Kevinlyh\User\Components;

use Illuminate\Support\Facades\Crypt;
use Illuminate\Support\Facades\Mail;
use Illuminate\Support\Facades\Redirect;
use Illuminate\Support\Facades\Validator;
use October\Rain\Exception\ValidationException;
use October\Rain\Exception\AjaxException;
use Kevinlyh\User\Models\User;
use October\Rain\Support\Facades\Flash;

class Account extends \Cms\Classes\ComponentBase
{
    public function componentDetails()
    {
        return [
            'name'        => 'kevinlyh.user::lang.account.name',
            'description' => 'kevinlyh.user::lang.account.description'
        ];
    }

    public function onRun()
    {
        parent::onRun(); // TODO: Change the autogenerated stub
        $this->page['user'] = $this->user();
    }

    //Properties
    public function user()
    {
        $user = session('user');
        return $user;
    }

    //Ajax
    public function onSignin()
    {
        $input = post();
        if($input){
            $rules = [
                'email' => 'required|email',
                'password' => 'required|between:6,20'
            ];
            $msg = [
                'email.required' => 'Email field is required!',
                'password.required' => 'Password field is required!',
            ];
            $validator = Validator::make($input, $rules, $msg);

            if($validator->passes()){
                $user = User::where('email',$input['email'])->first();
//                if($user && Crypt::decrypt($user->password) == $input['password']){
                if($user && $user->password == $input['password']){
                    session(['user'=>$user->toArray()]);
                    return Redirect::refresh();
                }
                else
                {
                    Flash::error('Email or password is wrong!');
                    throw new AjaxException(['#errMsgSignin' => $this->renderPartial('@err')]);
                }
            }
            else{
                throw new ValidationException($validator);
            }
        }
    }

    public function onLogout()
    {
        session(['user'=>null]);
        return Redirect::refresh();
    }

    public function onRegister()
    {
        $input = post();
        if($input){
            $rules = [
                'email' => 'required|email|unique:kusers',
                'password' => 'required|between:6,20'
            ];
            $msg = [
                'email.required' => 'Email field is required!',
                'password.required' => 'Password field is required!',
            ];
            $validator = Validator::make($input, $rules, $msg);

            if($validator->passes()){
//                $input['password'] = Crypt::encrypt($input['password']);
                $re = User::create($input);
                if($re){
                    $user = $input;
                    session(['user'=>$user]);
                    $this->sendWelcomeEmail($user);
                    return Redirect::refresh();
                }
                else{
                    Flash::error('Registration failed!');
                    throw new AjaxException(['#errMsgReg' => $this->renderPartial('@err')]);
                }
            }
            else{
                throw new ValidationException($validator);
            }
        }

    }

    protected function onUpdate()
    {
        $input = post();
//        dd($input);
        if($input){
            $rules = [
                'email' => 'required|email',
            ];
            if(strlen($input['password']) > 0){
                $rules['password'] = 'required|confirmed|between:6,20';
            }else{
                $input = array_except($input,'password');
            }
            $validator = Validator::make($input, $rules);

            if($validator->passes()){
//                $input['password'] = Crypt::encrypt($input['password']);
                $input = array_except($input,['_session_key','_token','password_confirmation']);
                $re = User::where('email',$input['email'])->update($input);
                if($re){
                    Flash::success('Updated!');
                    throw new AjaxException(['#errMsgUp' => $this->renderPartial('@err')]);
                }
                else{
                    Flash::error('Update failed!');
                    throw new AjaxException(['#errMsgUp' => $this->renderPartial('@err')]);
                }
            }
            else{
                throw new ValidationException($validator);
            }
        }

    }

    protected function sendWelcomeEmail($user)
    {
        $data = [
            'name' => $user['name'],
        ];

        Mail::send('kevinlyh.user::mail.welcome', $data, function($message) use ($user) {
            $message->to($user['email'], $user['name']);
        });
    }

}
